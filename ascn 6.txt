Slip 6
import java.util.Scanner;

class NumberIsZeroException extends Exception
{
	public NumberIsZeroException(String message)
	{
		super(message);
	}
}

public class Slip6a
{
	public static void main(String[] args)
	{
		Scanner scanner = new Scanner(System.in);

		System.out.print("Enter a number: ");
		int number = scanner.nextInt();

		try
		{
			if (number == 0)
			{
				throw new NumberIsZeroException("Number Is Zero");
			}
			else
			{
				int sum = sumOfFirstAndLastDigit(number);
				System.out.println("Sum of the first and last digit: " + sum);
			}
		}
		catch (NumberIsZeroException e)
		{
			System.out.println("Exception: " + e.getMessage());
		}
		finally
		{
			scanner.close();
		}
	}

	// Function to calculate the sum of the first and last digit of a number
	public static int sumOfFirstAndLastDigit(int num)
	{
		int lastDigit = num % 10;
		int firstDigit = Character.getNumericValue(Integer.toString(num).charAt(0));
		return firstDigit + lastDigit;
	}
}

Slip 6
import java.util.Scanner;

public class Slip6b
{
	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);

		System.out.println("Enter The number of Rows And Colums Of Array");
		int rows = sc.nextInt();
		int cols = sc.nextInt();
		int[][] arr = new int[rows][cols];

		System.out.println("Enter Array");
		for (int i = 0; i < arr.length; i++)
		{
			for (int j = 0; j < arr[i].length; j++)
			{
				System.out.println("Enter Array Element: " + i + " " + j);
				int num = sc.nextInt();
				arr[i][j] = num;
			}
			System.out.println("");
		}
		display(arr);

		System.out.println("Transpose of Matrix is: ");
		transpose(arr);

		sc.close();
	}

	static void display(int[][] arr)
	{
		System.out.println("Array Is:");
		for (int i = 0; i < arr.length; i++)
		{
			for (int j = 0; j < arr[i].length; j++)
			{
				System.out.print(arr[i][j] + " ");
			}
			System.out.println("");
		}
	}

	static void transpose(int[][] arr)
	{
		int rows = arr.length;
		int cols = arr[0].length;

		int[][] transposeMatrix = new int[cols][rows];
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				transposeMatrix[j][i] = arr[i][j];
			}
		}
		display(transposeMatrix);
	}
}

Slip 6
#create package
import math

def cube_area(side_length):
 return 6 * (side_length ** 2)

def cube_volume(side_length):
 return side_length ** 3

def sphere_area(radius):
 return 4 * math.pi * (radius ** 2)

def sphere_volume(radius):
 return (4/3) * math.pi * (radius ** 3)

#main.py

from geometry.shapes import cube_area, cube_volume, sphere_area, sphere_volume

def main():
 # Cube
 side_length = float(input("Enter the side length of the cube: "))
 print(f"Cube Area: {cube_area(side_length)}")
 print(f"Cube Volume: {cube_volume(side_length)}")

 # Sphere
 radius = float(input("Enter the radius of the sphere: "))
 print(f"Sphere Surface Area: {sphere_area(radius)}")
 print(f"Sphere Volume: {sphere_volume(radius)}")

if __name__ == "__main__":
 main()


Slip 6
import tkinter as tk
from tkinter import font

def update_font():
 font_name = font_name_var.get()
 font_size = font_size_var.get()
 is_bold = bold_var.get()
 
 # Construct the font style string
 font_style = (font_name, font_size, 'bold' if is_bold else 'normal')
 
 # Update the label font
 label.config(font=font_style)

# Create the main window
root = tk.Tk()
root.title("Font Style Changer")

# Variables for font settings
font_name_var = tk.StringVar(value='Arial')
font_size_var = tk.IntVar(value=12)
bold_var = tk.BooleanVar(value=False)

# Create and place widgets
label = tk.Label(root, text="Sample Text", font=('Arial', 12))
label.pack(pady=20)

# Font name options
font_names = ['Arial', 'Courier', 'Times New Roman']
tk.Label(root, text="Select Font:").pack()
for name in font_names:
  tk.Radiobutton(root, text=name, variable=font_name_var, value=name, command=update_font).pack()

# Font size options
tk.Label(root, text="Select Font Size:").pack()
font_size_options = [10, 12, 14, 16, 18, 20]
for size in font_size_options:
  tk.Radiobutton(root, text=str(size), variable=font_size_var, value=size, command=update_font).pack()

# Bold check button
tk.Checkbutton(root, text="Bold", variable=bold_var, command=update_font).pack()

# Start the GUI event loop
root.mainloop()

