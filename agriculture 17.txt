Slip 17
public class Slip17a
{
 public static void main(String[] args)
 {
  if (args.length == 0)
  {
   System.out.println("Usage: java Slip17a <number1> <number2> <number3> ...");
   return;
  }

  int n = args.length;
  int[] numbers = new int[n];
  int armstrongCount = 0;

  for (int i = 0; i < n; i++)
  {
   numbers[i] = Integer.parseInt(args[i]);
   if (isArmstrongNumber(numbers[i]))
   {
    armstrongCount++;
   }
  }

  int[] armstrongNumbers = new int[armstrongCount];
  int index = 0;

  for (int i = 0; i < n; i++)
  {
   if (isArmstrongNumber(numbers[i]))
   {
    armstrongNumbers[index] = numbers[i];
    index++;
   }
  }

  System.out.println("Armstrong numbers in the array:");

  for (int armstrongNumber : armstrongNumbers)
  {
   System.out.print(armstrongNumber + " ");
  }
 }

 public static boolean isArmstrongNumber(int number)
 {
  int originalNumber = number;
  int sum = 0;
  int digitCount = String.valueOf(number).length();

  while (number > 0)
  {
   int digit = number % 10;
   sum += Math.pow(digit, digitCount);
   number /= 10;
  }

  return sum == originalNumber;
 }
}

Slip 17
import java.util.Scanner;

class Product
{
 int pid;
 String pname;
 double price;
 int qty;

 public Product(int pid, String pname, double price, int qty)
 {
  this.pid = pid;
  this.pname = pname;
  this.price = price;
  this.qty = qty;
 }

 public double calculateTotalAmount()
 {
  return price * qty;
 }

 public void displayProductDetails()
 {
  System.out.println("Product ID: " + pid);
  System.out.println("Product Name: " + pname);
  System.out.println("Price: " + price);
  System.out.println("Quantity: " + qty);
  System.out.println("Total Amount: " + calculateTotalAmount());
 }
}

public class Slip17b
{
 public static void main(String[] args)
 {
  Scanner scanner = new Scanner(System.in);

  System.out.print("Enter the number of products: ");
  int n = scanner.nextInt();
  scanner.nextLine();

  Product[] products = new Product[n];

  for (int i = 0; i < n; i++)
  {
   System.out.println("\nEnter details for Product " + (i + 1) + ":");
   System.out.print("Enter Product ID: ");
   int pid = scanner.nextInt();
   scanner.nextLine();

   System.out.print("Enter Product Name: ");
   String pname = scanner.nextLine();

   System.out.print("Enter Price: ");
   double price = scanner.nextDouble();

   System.out.print("Enter Quantity: ");
   int qty = scanner.nextInt();

   products[i] = new Product(pid, pname, price, qty);
  }

  for (int i = 0; i < n; i++)
  {
   System.out.println("\nDetails for Product " + (i + 1) + ":");
   products[i].displayProductDetails();
  }

  scanner.close();
 }
}

Slip 17
import tkinter as tk

def convert_to_uppercase():
 input_text = entry.get()
 result_label.config(text=f"Uppercase Text: {input_text.upper()}")

# Set up the main window
root = tk.Tk()
root.title("Uppercase Converter")

# Create and place the widgets
tk.Label(root, text="Enter text:").pack(pady=10)

entry = tk.Entry(root, width=40)
entry.pack(pady=10)

convert_button = tk.Button(root, text="Convert to Uppercase", command=convert_to_uppercase)
convert_button.pack(pady=10)

result_label = tk.Label(root, text="Uppercase Text: ")
result_label.pack(pady=10)

# Run the application
root.mainloop()


Slip 17
class InvalidDateException(Exception):
 pass

class Date:
 def __init__(self):
  self.day = 0
  self.month = 0
  self.year = 0

 def accept(self):
  self.day = int(input("Enter day: "))
  self.month = int(input("Enter month: "))
  self.year = int(input("Enter year: "))
  if not self.is_valid():
   raise InvalidDateException("Invalid Date")

 def display(self):
  print(f"Date: {self.day:02d}/{self.month:02d}/{self.year}")

 def is_valid(self):
  if self.year < 1 or self.month < 1 or self.month > 12 or self.day < 1 or self.day > 31:
   return False
  if self.month in [4, 6, 9, 11] and self.day > 30:
   return False
  if self.month == 2:
   if (self.year % 4 == 0 and self.year % 100 != 0) or (self.year % 400 == 0):
    return self.day <= 29
   return self.day <= 28
  return True

# Example usage
try:
 date = Date()
 date.accept()
 date.display()
except InvalidDateException as e:
 print(f"Error: {e}")
except ValueError:
 print("Error: Please enter valid integers for day, month, and year.")

